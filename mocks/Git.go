// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import git "github.com/capnfabs/grouse/internal/git"
import mock "github.com/stretchr/testify/mock"

// Git is an autogenerated mock type for the Git type
type Git struct {
	mock.Mock
}

// GetRelativeLocation provides a mock function with given fields: currentDir
func (_m *Git) GetRelativeLocation(currentDir string) (string, error) {
	ret := _m.Called(currentDir)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(currentDir)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(currentDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository provides a mock function with given fields: dst
func (_m *Git) NewRepository(dst string) (git.WriteableRepository, error) {
	ret := _m.Called(dst)

	var r0 git.WriteableRepository
	if rf, ok := ret.Get(0).(func(string) git.WriteableRepository); ok {
		r0 = rf(dst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(git.WriteableRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenRepository provides a mock function with given fields: repoDir
func (_m *Git) OpenRepository(repoDir string) (git.Repository, error) {
	ret := _m.Called(repoDir)

	var r0 git.Repository
	if rf, ok := ret.Get(0).(func(string) git.Repository); ok {
		r0 = rf(repoDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(git.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
